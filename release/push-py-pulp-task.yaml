apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: push-py-pulp
spec:
  description: |
    A task to push Python packages from an OCI artifact to a Pulp repository.
  params:
    - name: SNAPSHOT_PATH
      type: string
      description: Path to the snapshot spec file containing image information
    - name: PULP_SECRET_NAME
      type: string
      description: >-
        The name of the secret containing the Pulp credentials. It must have the cert and key data
        attributes.
      default: pulp-credentials
    - name: PULP_BASE_URL
      type: string
      description: The base URL of the Pulp server
    - name: PULP_API_ROOT
      type: string
      description: The API root path of the Pulp server
      default: "/api/pulp/"
    - name: PULP_DOMAIN
      type: string
      description: The domain to use for Pulp operations
    - name: PULP_REPOSITORY
      type: string
  workspaces:
    - name: data
      description: The workspace containing data from previous pipeline tasks
  volumes:
    - name: pulp-secret
      secret:
        secretName: $(params.PULP_SECRET_NAME)
    - name: workdir
      emptyDir: {}
  stepTemplate:
    env:
      - name: SNAPSHOT_PATH
        value: $(params.SNAPSHOT_PATH)
      - name: PULP_BASE_URL
        value: $(params.PULP_BASE_URL)
      - name: PULP_API_ROOT
        value: $(params.PULP_API_ROOT)
      - name: PULP_DOMAIN
        value: $(params.PULP_DOMAIN)
      - name: PULP_REPOSITORY
        value: $(params.PULP_REPOSITORY)
      - name: IMAGES_TXT
        value: $(workspaces.data.path)/images.txt
      - name: FILES_DIR
        value: $(workspaces.data.path)/files
    volumeMounts:
      - name: pulp-secret
        mountPath: "/etc/pulp-secret"
        readOnly: true
      - name: workdir
        mountPath: "/var/workdir"
    workingDir: "/var/workdir"
  steps:
    - name: get-image-urls
      image: quay.io/konflux-ci/buildah-task:latest@sha256:b82d465a06c926882d02b721cf8a8476048711332749f39926a01089cf85a3f9
      script: |
        #!/bin/bash
        set -euo pipefail

        < "${SNAPSHOT_PATH}" jq -r '.components[].containerImage' | tee "${IMAGES_TXT}"

    - name: extract-artifacts
      image: quay.io/konflux-ci/oras:latest@sha256:1beeecce012c99794568f74265c065839f9703d28306a8430b667f639343a98b
      script: |
        #!/bin/bash
        set -euo pipefail

        AUTHFILE='/tmp/auth.json'
        mkdir -p "${FILES_DIR}"
        while read -r IMAGE; do
          echo "Processing ${IMAGE}"
          select-oci-auth "${IMAGE}" > "${AUTHFILE}"
          retry oras pull --registry-config "${AUTHFILE}" "${IMAGE}" -o "${FILES_DIR}"
        done < "${IMAGES_TXT}"

        ls -la "${FILES_DIR}"

    - name: upload
      image: quay.io/lucarval/calunga-builder:latest
      # TODO: Remove this after a proper image is used. The image should be pinned.
      imagePullPolicy: Always
      script: |
        #!/usr/bin/env bash

        cd "${FILES_DIR}"
        ls -la .

        pulp --help

        for pkg in *; do
          if [ -f "$pkg" ]; then
            echo "Uploading $pkg..."
            pulp --base-url "${PULP_BASE_URL}" --api-root "${PULP_API_ROOT}" --domain "${PULP_DOMAIN}" \
              --cert /etc/pulp-secret/cert --key /etc/pulp-secret/key \
              python content upload \
              --relative-path "$(basename ${pkg})" --file "${pkg}" --repository "${PULP_REPOSITORY}"
          fi
        done

        # TODO: Echo the index URL, e.g https://console.redhat.com/api/pulp-content/public-calunga/mypypi/simple

