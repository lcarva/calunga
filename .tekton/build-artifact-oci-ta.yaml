---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: build-artifact-oci-ta
  annotations:
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/tags: image-build, konflux
  labels:
    app.kubernetes.io/version: "0.1"
spec:
  description: |-
    This task allows to run a script stored on the git repository, or on the runner image, and
    pushes arbitrary files to an OCI repository as OCI artifacts. This task is ideal for building
    arbitrary binaries as OCI artifacts.
  params:
    - name: enableSymlinkCheck
      description: |
        Check symlinks in the repo. If they're pointing outside of the repo, the build will fail.
      type: string
      default: "true"
    - name: IMAGE
      description: Reference of the OCI artifact to be produced.
      type: string
    - name: IMAGE_EXPIRES_AFTER
      description: Delete image tag after specified time. Empty means to keep
        the image tag. Time values could be something like 1h, 2d, 3w for
        hours, days, and weeks, respectively.
      type: string
      default: ""
    - name: PREFETCH_ARTIFACT
      description: The Trusted Artifact URI pointing to the artifact with
        the prefetched dependencies.
      type: string
      default: ""
    - name: SCRIPT_RUNNER_IMAGE
      description: The image to run the script in
      type: string
    - name: SCRIPT
      description: The script to launch
      type: string
    - name: SCRIPT_WORKDIR
      description: The directory to launch the script from
      type: string
      default: /var/workdir/source
    - name: SCRIPT_ARTIFACT_RELATIVE_PATH
      description: The relative path relative to the source directory to store on the SCRIPT_ARTIFACT
      type: string
      default: .
    - name: STORAGE_DRIVER
      description: Storage driver to configure for buildah
      type: string
      default: vfs
    - name: HERMETIC
      description: Determines if build will be executed without network access.
      type: string
      default: "false"
    - name: SOURCE_ARTIFACT
      description: The Trusted Artifact URI pointing to the artifact with
        the application source code.
      type: string
    - name: caTrustConfigMapKey
      description: The name of the key in the ConfigMap that contains the
        CA bundle data.
      type: string
      default: ca-bundle.crt
    - name: caTrustConfigMapName
      description: The name of the ConfigMap to read CA bundle data from.
      type: string
      default: trusted-ca
  results:
    - name: SCRIPT_RUNNER_IMAGE_REFERENCE
      description: Reference and digest of the image used to run the script.
      type: string
    - name: IMAGE_DIGEST
      description: Digest of the OCI-Artifact just built
    - name: IMAGE_URL
      description: OCI-Artifact repository and tag where the built OCI-Artifact was pushed
    - name: IMAGE_REF
      description: OCI-Artifact reference of the built OCI-Artifact
  volumes:
    - name: trusted-ca
      configMap:
        items:
          - key: $(params.caTrustConfigMapKey)
            path: ca-bundle.crt
        name: $(params.caTrustConfigMapName)
        optional: true
    - name: workdir
      emptyDir: {}
    - name: varlibcontainers
      emptyDir: {}
  stepTemplate:
    computeResources:
      limits:
        memory: 1Gi
      requests:
        cpu: "1"
        memory: 1Gi
    volumeMounts:
      - mountPath: /var/workdir
        name: workdir
  steps:
    - name: use-trusted-artifact
      image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:ff35e09ff5c89e54538b50abae241a765b2b7868f05d62c4835bebf0978f3659
      args:
        - use
        - $(params.SOURCE_ARTIFACT)=/var/workdir/source
        - $(params.PREFETCH_ARTIFACT)=/var/workdir/cachi2
      volumeMounts:
        - mountPath: /etc/pki/tls/certs/ca-custom-bundle.crt
          name: trusted-ca
          readOnly: true
          subPath: ca-bundle.crt
    - name: run-script
      image: quay.io/konflux-ci/buildah-task:latest@sha256:b82d465a06c926882d02b721cf8a8476048711332749f39926a01089cf85a3f9
      workingDir: /var/workdir
      volumeMounts:
        - mountPath: /mnt/trusted-ca
          name: trusted-ca
          readOnly: true
        - mountPath: /var/lib/containers
          name: varlibcontainers
      env:
        - name: PARAM_ENABLE_SYMLINK_CHECK
          value: $(params.enableSymlinkCheck)
        - name: SCRIPT
          value: $(params.SCRIPT)
        - name: SCRIPT_ARTIFACT_RELATIVE_PATH
          value: $(params.SCRIPT_ARTIFACT_RELATIVE_PATH)
        - name: SCRIPT_WORKDIR
          value: $(params.SCRIPT_WORKDIR)
        - name: SCRIPT_RUNNER_IMAGE
          value: $(params.SCRIPT_RUNNER_IMAGE)
        - name: STORAGE_DRIVER
          value: $(params.STORAGE_DRIVER)
        - name: HERMETIC
          value: $(params.HERMETIC)
      script: |
        #!/bin/bash
        set -euo pipefail
        ca_bundle=/mnt/trusted-ca/ca-bundle.crt
        if [ -f "$ca_bundle" ]; then
          echo "INFO: Using mounted CA bundle: $ca_bundle"
          cp -vf $ca_bundle /etc/pki/ca-trust/source/anchors
          update-ca-trust
        fi

        # Ensure the artifact directory is inside the source directory
        REAL_ARTIFACT_PATH="$(realpath -m "/var/workdir/source/${SCRIPT_ARTIFACT_RELATIVE_PATH}")"
        if [[ "${REAL_ARTIFACT_PATH}" != /var/workdir/source/* ]] && [[ "${REAL_ARTIFACT_PATH}" != /var/workdir/source ]]
        then
          echo "the trusted artifact path is out of the source directory: ${REAL_ARTIFACT_PATH}"
          exit 1
        fi

        # Fixing group permission on /var/lib/containers
        chown root:root /var/lib/containers

        sed -i 's/^\s*short-name-mode\s*=\s*.*/short-name-mode = "disabled"/' /etc/containers/registries.conf

        # Setting new namespace to run buildah - 2^32-2
        echo 'root:1:4294967294' | tee -a /etc/subuid >>/etc/subgid

        UNSHARE_ARGS=()
        if [ "${HERMETIC}" == "true" ]; then
          echo "The script will be executed with network isolation"
          UNSHARE_ARGS+=("--net")
        fi

        HERMETO_MOUNT=""
        HERMETO_SOURCE=""
        if [ -d "/var/workdir/cachi2" ]; then
          HERMETO_MOUNT="--volume /var/workdir/cachi2:/cachi2"
          HERMETO_SOURCE=". /cachi2/cachi2.env &&"
        fi

        # Create the script file
        printf '%s' "$SCRIPT" > /tmp/script.sh
        chmod +x /tmp/script.sh

        buildah from --name script-container "$SCRIPT_RUNNER_IMAGE"
        BUILDAH_CMD="buildah run ${HERMETO_MOUNT} --volume /tmp/script.sh:/tmp/script.sh --volume /var/workdir/source:/var/workdir/source --workingdir ${SCRIPT_WORKDIR} --user root:root -- script-container /bin/sh -c '${HERMETO_SOURCE} exec /tmp/script.sh'"
        unshare -Uf "${UNSHARE_ARGS[@]}" --keep-caps -r --map-users 1,1,65536 --map-groups 1,1,65536 -w /var/workdir sh -c "${BUILDAH_CMD}"

        IMAGE_REFERENCE=$(buildah inspect script-container | jq -r '.FromImage')
        # FromImage might contain the digest or not. Append the digest if it does not.
        if [[ ! "${IMAGE_REFERENCE}" =~ "@sha256:" ]]; then
          IMAGE_REFERENCE+="@$(buildah inspect script-container | jq -r '.FromImageDigest')"
        fi
        echo -n "$IMAGE_REFERENCE" > "$(results.SCRIPT_RUNNER_IMAGE_REFERENCE.path)"

        # Ensure there are no symlinks going out of the artifact directory
        check_symlinks() {
          FOUND_SYMLINK_POINTING_OUTSIDE_OF_REPO=false
          while read -r symlink; do
            target=$(readlink -m "$symlink")
            if ! [[ "$target" =~ ^$REAL_ARTIFACT_PATH ]]; then
              echo "The script output directory contains symlink pointing outside of the directory: $symlink"
              FOUND_SYMLINK_POINTING_OUTSIDE_OF_REPO=true
            fi
          done < <(find "$REAL_ARTIFACT_PATH" -type l -print)
          if [ "$FOUND_SYMLINK_POINTING_OUTSIDE_OF_REPO" = true ]; then
            return 1
          fi
        }

        if [ "${PARAM_ENABLE_SYMLINK_CHECK}" = "true" ]; then
          echo "Running symlink check"
          check_symlinks
        fi

        # buildah requires a root owned source ta, however we don't want to run the script as root
        # fix permissions after running the script.
        chown -R root:root "$REAL_ARTIFACT_PATH"
      securityContext:
        capabilities:
          add:
            - SETFCAP
    - name: create-oci-artifact
      image: quay.io/konflux-ci/oras:latest@sha256:1beeecce012c99794568f74265c065839f9703d28306a8430b667f639343a98b
      script: |
        #!/bin/bash
        set -euo pipefail

        select-oci-auth "$IMAGE" > auth.json
        AUTHFILE="$(realpath auth.json)"

        [ -n "$IMAGE_EXPIRES_AFTER" ] && EXPIRE_LABEL=("--annotation" "quay.expires-after=$IMAGE_EXPIRES_AFTER")

        # TODO: If SCRIPT_ARTIFACT_RELATIVE_PATH is a file, push that instead. Currently, it assumes,
        # without verifying, that it may be a directory.

        # Change into the artifact path so the Image Manifest contains the name of the artifact
        # without including the build path.
        pushd "/var/workdir/source/${SCRIPT_ARTIFACT_RELATIVE_PATH}" > /dev/null
        ls -la .

        # Use nullglob in case there are no matching files.
        shopt -s nullglob
        # Create an array of absolute paths for files found under the artifact path
        ARTIFACT_FILES=(*)

        echo "Pushing OCI artifact to ${IMAGE}"
        if ! retry oras push "$IMAGE" \
          --registry-config "${AUTHFILE}" \
          "${EXPIRE_LABEL[@]}" \
          "${ARTIFACT_FILES[@]}"
        then
          echo "Failed to push OCI artifact ${IMAGE} to registry"
          exit 1
        fi
        popd > /dev/null

        if ! RESULTING_DIGEST=$(retry oras resolve --registry-config "${AUTHFILE}" "${IMAGE}")
        then
          echo "Failed to get digest for ${IMAGE} from registry"
          exit 1
        fi
        echo -n "$IMAGE" | tee "$(results.IMAGE_URL.path)"
        echo -n "$RESULTING_DIGEST" | tee "$(results.IMAGE_DIGEST.path)"
        echo -n "${IMAGE}@${RESULTING_DIGEST}" | tee "$(results.IMAGE_REF.path)"

      volumeMounts:
        - mountPath: /var/workdir
          name: workdir
        - mountPath: /etc/pki/tls/certs/ca-custom-bundle.crt
          name: trusted-ca
          readOnly: true
          subPath: ca-bundle.crt
      env:
        - name: IMAGE
          value: $(params.IMAGE)
        - name: IMAGE_EXPIRES_AFTER
          value: $(params.IMAGE_EXPIRES_AFTER)
        - name: SCRIPT_ARTIFACT_RELATIVE_PATH
          value: $(params.SCRIPT_ARTIFACT_RELATIVE_PATH)
      computeResources:
        limits:
          memory: 1Gi
        requests:
          cpu: "1"
          memory: 1Gi
